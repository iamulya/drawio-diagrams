<mxfile host="app.diagrams.net" modified="2020-07-09T18:03:33.923Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36" etag="gWW7lv1iErZFmzvqCEqt" version="13.4.0" type="github">
  <diagram id="cE_NSa8QyI1WMCDkIsqq" name="Page-1">
    <mxGraphModel dx="1422" dy="713" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="1q6bK33gM2vIXhDF_8vI-1" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Speedy, simple, singular&lt;/font&gt;&lt;/h1&gt;&lt;p style=&quot;font-size: 13px&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;font-size: 13px&quot;&gt;&lt;b&gt; Functions are concise, short, single purpose and their environment may live up to their request lifecycle. Transactions are efficiently cost aware and thus faster executions are preferred.&lt;/b&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="40" y="120" width="190" height="220" as="geometry" />
        </mxCell>
        <mxCell id="1q6bK33gM2vIXhDF_8vI-3" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Think concurrent requests, not total requests&lt;br&gt;&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font style=&quot;font-size: 13px&quot;&gt;&lt;b&gt; Serverless applications take&lt;br&gt;advantage of the concurrency model, and tradeoffs at the design level are evaluated based on concurrency&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="280" y="120" width="230" height="180" as="geometry" />
        </mxCell>
        <mxCell id="1q6bK33gM2vIXhDF_8vI-6" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Share nothing&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Function runtime environment and underlying infrastructure are short-lived, therefore local resources such as temporary storage is not guaranteed. State can be manipulated within a state machine execution lifecycle,&lt;br&gt;and persistent storage is preferred for highly durable requirements&lt;/b&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="560" y="120" width="190" height="260" as="geometry" />
        </mxCell>
        <mxCell id="1q6bK33gM2vIXhDF_8vI-7" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Assume no hardware affinity&lt;/font&gt;&lt;br&gt;&lt;/h1&gt;&lt;p style=&quot;font-size: 13px&quot;&gt;&lt;b&gt;Underlying infrastructure may change. Leverage code or dependencies that are hardware-agnostic as CPU flags, for example, may not be available consistently.&lt;/b&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="280" y="400" width="220" height="180" as="geometry" />
        </mxCell>
        <mxCell id="1q6bK33gM2vIXhDF_8vI-10" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Orchestrate with state machines&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font style=&quot;font-size: 13px&quot;&gt;&lt;b&gt;Chaining Lambda executions within the code to orchestrate the workflow of your application results in a monolithic and tightly coupled application. Instead, use a&lt;br&gt;state machine to orchestrate transactions and communication flows.&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="40" y="640" width="200" height="220" as="geometry" />
        </mxCell>
        <mxCell id="1q6bK33gM2vIXhDF_8vI-11" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Use events to trigger transaction&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font style=&quot;font-size: 13px&quot;&gt;&lt;b&gt;Events such as writing a new Amazon S3 object or an update to a database allow for transaction execution in response to business functionalities.&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="280" y="640" width="230" height="180" as="geometry" />
        </mxCell>
        <mxCell id="1q6bK33gM2vIXhDF_8vI-12" value="&lt;h1&gt;&lt;font color=&quot;#ff6666&quot;&gt;Design for failure and duplicates&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;&lt;font style=&quot;font-size: 13px&quot;&gt;&lt;b&gt;Operations triggered from requests / events&lt;br/&gt;must be idempotent as failures can occur and a given request/event can be&lt;br/&gt;delivered more than once. Include appropriate retries for downstream calls.&lt;/b&gt;&lt;/font&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="560" y="640" width="230" height="180" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
